// Code generated by mockery v2.20.0. DO NOT EDIT.

package http

import mock "github.com/stretchr/testify/mock"

// MockHandlerDependencyProvider is an autogenerated mock type for the HandlerDependencyProvider type
type MockHandlerDependencyProvider struct {
	mock.Mock
}

type MockHandlerDependencyProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandlerDependencyProvider) EXPECT() *MockHandlerDependencyProvider_Expecter {
	return &MockHandlerDependencyProvider_Expecter{mock: &_m.Mock}
}

// MemberService provides a mock function with given fields:
func (_m *MockHandlerDependencyProvider) MemberService() MemberService {
	ret := _m.Called()

	var r0 MemberService
	if rf, ok := ret.Get(0).(func() MemberService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(MemberService)
		}
	}

	return r0
}

// MockHandlerDependencyProvider_MemberService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MemberService'
type MockHandlerDependencyProvider_MemberService_Call struct {
	*mock.Call
}

// MemberService is a helper method to define mock.On call
func (_e *MockHandlerDependencyProvider_Expecter) MemberService() *MockHandlerDependencyProvider_MemberService_Call {
	return &MockHandlerDependencyProvider_MemberService_Call{Call: _e.mock.On("MemberService")}
}

func (_c *MockHandlerDependencyProvider_MemberService_Call) Run(run func()) *MockHandlerDependencyProvider_MemberService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHandlerDependencyProvider_MemberService_Call) Return(_a0 MemberService) *MockHandlerDependencyProvider_MemberService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandlerDependencyProvider_MemberService_Call) RunAndReturn(run func() MemberService) *MockHandlerDependencyProvider_MemberService_Call {
	_c.Call.Return(run)
	return _c
}

// PasswordService provides a mock function with given fields:
func (_m *MockHandlerDependencyProvider) PasswordService() PasswordService {
	ret := _m.Called()

	var r0 PasswordService
	if rf, ok := ret.Get(0).(func() PasswordService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PasswordService)
		}
	}

	return r0
}

// MockHandlerDependencyProvider_PasswordService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PasswordService'
type MockHandlerDependencyProvider_PasswordService_Call struct {
	*mock.Call
}

// PasswordService is a helper method to define mock.On call
func (_e *MockHandlerDependencyProvider_Expecter) PasswordService() *MockHandlerDependencyProvider_PasswordService_Call {
	return &MockHandlerDependencyProvider_PasswordService_Call{Call: _e.mock.On("PasswordService")}
}

func (_c *MockHandlerDependencyProvider_PasswordService_Call) Run(run func()) *MockHandlerDependencyProvider_PasswordService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHandlerDependencyProvider_PasswordService_Call) Return(_a0 PasswordService) *MockHandlerDependencyProvider_PasswordService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandlerDependencyProvider_PasswordService_Call) RunAndReturn(run func() PasswordService) *MockHandlerDependencyProvider_PasswordService_Call {
	_c.Call.Return(run)
	return _c
}

// SessionService provides a mock function with given fields:
func (_m *MockHandlerDependencyProvider) SessionService() SessionService {
	ret := _m.Called()

	var r0 SessionService
	if rf, ok := ret.Get(0).(func() SessionService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(SessionService)
		}
	}

	return r0
}

// MockHandlerDependencyProvider_SessionService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SessionService'
type MockHandlerDependencyProvider_SessionService_Call struct {
	*mock.Call
}

// SessionService is a helper method to define mock.On call
func (_e *MockHandlerDependencyProvider_Expecter) SessionService() *MockHandlerDependencyProvider_SessionService_Call {
	return &MockHandlerDependencyProvider_SessionService_Call{Call: _e.mock.On("SessionService")}
}

func (_c *MockHandlerDependencyProvider_SessionService_Call) Run(run func()) *MockHandlerDependencyProvider_SessionService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHandlerDependencyProvider_SessionService_Call) Return(_a0 SessionService) *MockHandlerDependencyProvider_SessionService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandlerDependencyProvider_SessionService_Call) RunAndReturn(run func() SessionService) *MockHandlerDependencyProvider_SessionService_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockHandlerDependencyProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockHandlerDependencyProvider creates a new instance of MockHandlerDependencyProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockHandlerDependencyProvider(t mockConstructorTestingTNewMockHandlerDependencyProvider) *MockHandlerDependencyProvider {
	mock := &MockHandlerDependencyProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
