<template>
    {% import ActivePageContainer from 'sham-ui-router/lib/active-page-container' %}
    {% import WithoutFlushLoader from 'sham-ui-without-flush-loader' %}
    {% import path from 'sham-ui-router/lib/params' %}
    {% import Navigation from './authenticated/navigation.sfc' %}
    {% import Profile from './authenticated/profile.sfc' %}
    {% import PageLoadingIndicator from '../PageLoadingIndicator.sht' %}

    <div class=\{{wrapperClasses}} :onclick=\{{this$.wrapperOnClick}}>
        <div class="logo">
            <a :hrefto=\{{path("home")}}>
                <span>[</span>
                {{ logoText }}
                <span>]</span>
            </a>
        </div>

        <div class="sideleft">
            <Navigation/>
        </div>

        <div class="header">
            <div class="header-left">
                <div class="navicon-left">
                    <a :onclick=\{{this$.navigationButtonOnClick}}>
                        <i class="icon-menu"></i>
                    </a>
                </div>
            </div>
            <div class="header-right">
                <Profile/>
            </div>
        </div>

        <div class="mainpanel">
            {% if routerData.pageLoaded %}
                <ActivePageContainer/>
            {% else %}
                <!-- Wait load lazy page -->
                <WithoutFlushLoader loadingComponent=\{{PageLoadingIndicator}}/>
            {% endif %}
        </div>
    </div>
</template>

<script>
    import { useStorage } from 'sham-ui-router/lib/storage';

    const MAX_SCREEN_SIZE = 992;

    function LayoutAuthenticated( options, update ) {
        const wrapperClasses = $();
        const menuCollapsed = $();
        const smallScreenSize = $();

        const state = options( {
            [ wrapperClasses ]: '',
            [ menuCollapsed ]: false,
            [ smallScreenSize ]: false
        } );

        this$.navigationButtonOnClick = ( e ) => {
            e.stopPropagation();
            let classes = '';
            if ( state[ smallScreenSize ] ) {
                if ( state[ menuCollapsed ] ) {
                    classes = 'show-left';
                }
            } else {
                if ( !state[ menuCollapsed ] ) {
                    classes = 'collapsed-menu';
                }
            }
            update( {
                [ wrapperClasses ]: classes,
                [ menuCollapsed ]: !state[ menuCollapsed ]
            } );
        };

        this$.wrapperOnClick = () => {
            if ( state[ smallScreenSize ] && !state[ menuCollapsed ] ) {
                update( {
                    [ menuCollapsed ]: true,
                    [ wrapperClasses ]: ''
                } );
            }
        };

        const onRender = this.onRender;
        this.onRender = () => {
            if ( onRender ) {
                onRender.call( this );
            }

            // media query change
            const WidthChange = ( mq ) => {
                const smallScreenSizeNow = !mq.matches;
                update( {
                    [ smallScreenSize ]: smallScreenSizeNow,
                    [ menuCollapsed ]: (
                        smallScreenSizeNow &&
                        smallScreenSizeNow !== state[ smallScreenSize ]
                    ) || state[ menuCollapsed ]
                } );
            };

            // media query event handler
            if ( window.matchMedia ) {
                const mq = window.matchMedia( `(min-width: ${MAX_SCREEN_SIZE}px)` );
                mq.addListener( WidthChange );
                WidthChange( mq );
            }
        };
    }

    export default Component( Template, useStorage( $.routerData ), LayoutAuthenticated );
</script>
