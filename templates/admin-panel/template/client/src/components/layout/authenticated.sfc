<template>
    {% import ActivePageContainer from 'sham-ui-router/active-page-container' %}
    {% import WithoutFlushLoader from 'sham-ui-without-flush-loader' %}
    {% import path from 'sham-ui-router/params' %}
    {% import Navigation from './authenticated/navigation.sfc' %}
    {% import Profile from './authenticated/profile.sfc' %}
    {% import PageLoadingIndicator from '../PageLoadingIndicator.sht' %}

    <div class=\{{wrapperClasses}} :onclick=\{{::this.wrapperOnClick}}>
        <div class="logo">
            <a :hrefto=\{{path("home")}}>
                <span>[</span>
                {{ logoText }}
                <span>]</span>
            </a>
        </div>

        <div class="sideleft">
            <Navigation/>
        </div>

        <div class="header">
            <div class="header-left">
                <div class="navicon-left">
                    <a :onclick=\{{::this.navigationButtonOnClick}}>
                        <i class="icon-menu"></i>
                    </a>
                </div>
            </div>
            <div class="header-right">
                <Profile/>
            </div>
        </div>

        <div class="mainpanel">
            {% if routerData.pageLoaded %}
                <ActivePageContainer/>
            {% else %}
                <!-- Wait load lazy page -->
                <WithoutFlushLoader loadingComponent=\{{PageLoadingIndicator}}/>
            {% endif %}
        </div>
    </div>
</template>

<script>
    import { options, mergeWithTemplate } from 'sham-ui-macro/babel.macro';
    import { useStorage } from 'sham-ui-router/storage';

    const MAX_SCREEN_SIZE = 992;

    @mergeWithTemplate
    class LayoutAuthenticated extends Template {
        @options wrapperClasses = '';
        @options menuCollapsed = false;
        @options smallScreenSize = false;

        navigationButtonOnClick( e ) {
            e.stopPropagation();
            let wrapperClasses = '';
            if ( this.options.smallScreenSize ) {
                if ( this.options.menuCollapsed ) {
                    wrapperClasses = 'show-left';
                }
            } else {
                if ( !this.options.menuCollapsed ) {
                    wrapperClasses = 'collapsed-menu';
                }
            }
            this.update( {
                wrapperClasses,
                menuCollapsed: !this.options.menuCollapsed
            } );
        }

        wrapperOnClick() {
            if ( this.options.smallScreenSize && !this.options.menuCollapsed ) {
                this.update( {
                    menuCollapsed: true,
                    wrapperClasses: ''
                } );
            }
        }

        render() {
            super.render( ...arguments );
            this._screenWidthChange();
        }

        _screenWidthChange() {

            // media query change
            const WidthChange = ( mq ) => {
                const smallScreenSize = !mq.matches;
                this.update( {
                    smallScreenSize,
                    menuCollapsed: (
                        smallScreenSize &&
                        smallScreenSize !== this.options.smallScreenSize
                    ) || this.options.menuCollapsed
                } );
            };

            // media query event handler
            if ( window.matchMedia ) {
                const mq = window.matchMedia( `(min-width: ${MAX_SCREEN_SIZE}px)` );
                mq.addListener( WidthChange );
                WidthChange( mq );
            }
        }
    }

    export default useStorage( 'routerData' )( LayoutAuthenticated );
</script>
