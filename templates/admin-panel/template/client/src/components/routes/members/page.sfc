<template>
    {% import ErrorsPanel from '../../ErrorsPanel.sht' %}
    {% import Page from '../../Page.sfc' %}
    {% import Pagination from '../../pagination/index.sfc' %}
    {% import MembersCreate from './create.sfc' %}
    {% import MembersTable from './table.sfc' %}
    {% import MembersDetail from './detail.sfc' %}

    <Page>
        {% block 'header' %}
            \{{pageTitle}}
        {% endblock %}

        {% block 'body' %}
            <div class="members-page">
                <ErrorsPanel errors=\{{errors}}/>

                <div class="container">
                    <button
                        data-test-toggle-create-form
                        class="mg-b-30"
                        :onclick=\{{::this._toggleCreateForm}}
                    >
                        \{{
                            createFormVisible ?
                                'Hide create new member form' :
                                'Show create new member form'
                        }}
                    </button>
                    {% if createFormVisible %}
                        <div class="panel mg-b-30 create-member">
                            <MembersCreate onCreateSuccess=\{{::this._onCreateMember}} />
                        </div>
                    {% endif %}
                </div>

                <div class="container">
                    <div class="members-list">
                        <div class="panel">
                            <Pagination
                                dataLoaded=\{{dataLoaded}}
                                goToPage=\{{::this.loadData}}
                                currentPage=\{{page}}
                                limit=\{{limit}}
                                total=\{{total}}
                            >
                                <MembersTable
                                    members=\{{members}}
                                    selectedMember=\{{selectedMember}}
                                    onSelectMember=\{{::this._selectMember}}
                                    showErrors=\{{::this._showErrors}}
                                    refresh=\{{this.loadData.bind( this, page )}}
                                />
                            </Pagination>
                        </div>
                    </div>

                    {% if selectedMember %}
                        <div class="member-detail">
                            <div class="panel">
                                <MembersDetail
                                    member=\{{selectedMember}}
                                    onUpdateSuccess=\{{this.loadData.bind( this, page )}}
                                />
                            </div>
                        </div>
                    {% endif %}
                </div>
            </div>
        {% endblock %}
    </Page>
</template>

<script>
    import { mergeWithTemplate, inject, options } from 'sham-ui-macro/babel.macro';

    @mergeWithTemplate
    class RoutesMembersPage extends Template {
        /** @type Store */
        @inject store;

        /** @type {Title} */
        @inject title;

        @options pageTitle = 'Members';
        @options dataLoaded = false;
        @options errors = [];
        @options offset = 0;
        @options limit = 50;
        @options total = 0;
        @options members = [];

        @options createFormVisible = false;
        @options selectedMember = null;

        didMount() {
            this.title.change( this.options.pageTitle );
            this.loadData( 1 );
        }

        offsetByPage( page, limit ) {

            // Page=1 will result into offset 0, page=2 will result into
            // offset 50 and so on
            return ( page - 1 ) * limit;
        }

        loadData( page ) {
            this.update( {
                dataLoaded: false,
                selectedMember: null
            } );
            this.store.api.request( {
                url: 'admin/members',
                params: {
                    offset: this.offsetByPage( page, this.options.limit ),
                    limit: this.options.limit
                }
            } ).then(
                data => this._loadDataSuccess( page, data ),
                ::this._loadDataFail
            );
        }

        _loadDataSuccess( page, { members, meta } ) {
            this.update( {
                dataLoaded: true,
                errors: [],
                page,
                members,
                ...meta // is offset, limit & total
            } );
        }

        _loadDataFail( { Messages = [ 'Fail load members list' ] } ) {
            this.update( {
                dataLoaded: true,
                errors: Messages
            } );
        }

        _toggleCreateForm() {
            this.update( {
                createFormVisible: !this.options.createFormVisible
            } );
        }

        _onCreateMember() {
            this.update( {
                createFormVisible: false
            } );
            this.loadData( this.options.page );
        }

        _showErrors( errors ) {
            this.update( { errors } );
        }

        _selectMember( selectedMember ) {
            this.update( { selectedMember } );
        }
    }

    export default RoutesMembersPage;
</script>
