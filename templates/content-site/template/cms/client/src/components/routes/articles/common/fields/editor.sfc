<template>
    <textarea :ref=\{{$.textarea}}></textarea>
</template>

<script>
    import suneditor from 'suneditor';
    import { link, formatBlock, blockquote, align, list, table, image } from 'suneditor/src/plugins';

    function EditorField( options, update, didMount, onRemove ) {
        const value = $();
        const onChange = $();

        const state = options( {
            [ value ]: '',
            [ onChange ]() {}
        } );

        let editor = null;

        this.spots = [ [
            value,
            contents => {
                if ( editor && contents !== editor.getContents() ) {
                    editor.setContents( contents );
                }
            }
        ] ];

        const api = this.DI.resolve( 'store' ).api;
        const createEditor = suneditor.init( {
            height: 400,
            width: '100%',
            plugins: [
                link,
                formatBlock,
                blockquote,
                align,
                list,
                table,
                image
            ],
            buttonList: [
                [ 'undo', 'redo' ],
                [ 'formatBlock' ],
                [ 'blockquote' ],
                [ 'bold', 'underline', 'italic', 'strike', 'subscript', 'superscript' ],
                [ 'removeFormat' ],
                [ 'outdent', 'indent' ],
                [ 'align', 'list'  ],
                [ 'table', 'link' ],
                [ 'image' ],
                [ 'fullScreen', 'showBlocks', 'codeView' ],
                [ 'preview', 'print' ]
            ],
            imageUploadHeader: { 'X-CSRF-Token': api.token },
            imageUploadUrl: api.baseURL + 'upload-image'
        } );

        didMount( () => {
            editor = createEditor.create( this$.textarea );
            if ( !PRODUCTION ) {

                // For dev environment use monkey patching suneditor util for work in CORS mode
                editor.util.getXMLHttpRequest = function() {
                    const xhr = new XMLHttpRequest();
                    xhr.withCredentials = true;
                    return xhr;
                };
            }
            editor.setContents( state[ value ] );
            editor.onChange = contents => state[ onChange ]( contents );
        } );

        onRemove( () => {
            editor.destroy();
            editor = null;
        } );
    }

    export default Component( Template, EditorField );
</script>
