<template>
    {% import ErrorsPanel from '../../../ErrorsPanel.sht' %}
    {% import Page from '../../../Page.sfc' %}
    {% import ArticleForm from '../common/article-form.sfc' %}

    <Page dataLoaded=\{{dataLoaded}}>
        {% block 'header' %}
            \{{pageTitle + ":" + article.title}}
        {% endblock %}

        {% block 'body' %}
            <div class="articles-page">
                <ErrorsPanel errors=\{{errors}} />
                <div class="panel">
                    <ArticleForm
                        title=\{{article.title}}
                        category=\{{article.category_id}}
                        shortBody=\{{article.short_body}}
                        body=\{{article.body}}
                        tags=\{{article.tags || []}}
                        publishedAt=\{{article.published_at | parseDate}}
                        save=\{{this$.updateArticle}}
                        onSaveSuccess=\{{this$.onUpdateArticle}}
                    />
                </div>
            </div>
        {% endblock %}
    </Page>
</template>

<script>
    function extendContext() {
        this.ctx.appendFilters( {
            parseDate: date => new Date( date )
        } );
    }

    function RoutesArticlesEditPage( options, didMount ) {
        const dataLoaded = $();
        const article = $();
        const pageTitle = $();
        const errors = $();

        const state = options( {
            [ dataLoaded ]: false,
            [ article ]: {},
            [ errors ]: [],
            [ pageTitle ]: 'Edit article'
        } );

        /** @type {Store} */
        const store = this.ctx.DI.resolve( 'store' );

        const router = this.ctx.DI.resolve( 'router' );

        didMount( () => {
            store.articleDetail( router.storage.params.id ).then(
                detail => {
                    this.ctx.DI.resolve( 'title' ).change(
                        `${state[ pageTitle ]}: ${detail.title}`
                    );
                    state( {
                        [ article ]: detail,
                        [ dataLoaded ]: true
                    } );
                },
                ( { Messages = [ 'Load article detail fail' ] } ) => state( {
                    [ dataLoaded ]: true,
                    [ errors ]: Messages
                } )
            );
        } );

        this$.updateArticle = ( data ) => store.updateArticle(
            router.storage.params.id,
            data
        );

        this$.onUpdateArticle = () => router.navigateToRoute( 'articles/list' );
    }

    export default Component( extendContext, Template, RoutesArticlesEditPage );
</script>
