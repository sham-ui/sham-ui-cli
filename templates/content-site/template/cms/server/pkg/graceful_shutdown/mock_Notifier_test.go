// Code generated by mockery v2.20.0. DO NOT EDIT.

package graceful_shutdown

import mock "github.com/stretchr/testify/mock"

// MockNotifier is an autogenerated mock type for the Notifier type
type MockNotifier struct {
	mock.Mock
}

// Notify provides a mock function with given fields:
func (_m *MockNotifier) Notify() <-chan error {
	ret := _m.Called()

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *MockNotifier) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewMockNotifier interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockNotifier creates a new instance of MockNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockNotifier(t mockConstructorTestingTNewMockNotifier) *MockNotifier {
	mock := &MockNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
