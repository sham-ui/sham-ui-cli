// Code generated by mockery v2.20.0. DO NOT EDIT.

package categories

import (
	model "cms/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSlugifyService is an autogenerated mock type for the SlugifyService type
type MockSlugifyService struct {
	mock.Mock
}

type MockSlugifyService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSlugifyService) EXPECT() *MockSlugifyService_Expecter {
	return &MockSlugifyService_Expecter{mock: &_m.Mock}
}

// SlugifyCategory provides a mock function with given fields: ctx, name
func (_m *MockSlugifyService) SlugifyCategory(ctx context.Context, name string) model.CategorySlug {
	ret := _m.Called(ctx, name)

	var r0 model.CategorySlug
	if rf, ok := ret.Get(0).(func(context.Context, string) model.CategorySlug); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(model.CategorySlug)
	}

	return r0
}

// MockSlugifyService_SlugifyCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlugifyCategory'
type MockSlugifyService_SlugifyCategory_Call struct {
	*mock.Call
}

// SlugifyCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockSlugifyService_Expecter) SlugifyCategory(ctx interface{}, name interface{}) *MockSlugifyService_SlugifyCategory_Call {
	return &MockSlugifyService_SlugifyCategory_Call{Call: _e.mock.On("SlugifyCategory", ctx, name)}
}

func (_c *MockSlugifyService_SlugifyCategory_Call) Run(run func(ctx context.Context, name string)) *MockSlugifyService_SlugifyCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSlugifyService_SlugifyCategory_Call) Return(_a0 model.CategorySlug) *MockSlugifyService_SlugifyCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSlugifyService_SlugifyCategory_Call) RunAndReturn(run func(context.Context, string) model.CategorySlug) *MockSlugifyService_SlugifyCategory_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockSlugifyService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSlugifyService creates a new instance of MockSlugifyService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSlugifyService(t mockConstructorTestingTNewMockSlugifyService) *MockSlugifyService {
	mock := &MockSlugifyService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
