// Code generated by mockery v2.20.0. DO NOT EDIT.

package list

import (
	model "cms/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTagService is an autogenerated mock type for the TagService type
type MockTagService struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *MockTagService) All(ctx context.Context) ([]model.Tag, error) {
	ret := _m.Called(ctx)

	var r0 []model.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Tag, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Tag); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTagService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTagService creates a new instance of MockTagService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTagService(t mockConstructorTestingTNewMockTagService) *MockTagService {
	mock := &MockTagService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
