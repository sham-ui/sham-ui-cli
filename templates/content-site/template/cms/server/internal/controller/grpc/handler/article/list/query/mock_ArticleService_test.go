// Code generated by mockery v2.20.0. DO NOT EDIT.

package query

import (
	model "cms/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockArticleService is an autogenerated mock type for the ArticleService type
type MockArticleService struct {
	mock.Mock
}

// FindShortInfoWithCategoryForQuery provides a mock function with given fields: ctx, query, offset, limit
func (_m *MockArticleService) FindShortInfoWithCategoryForQuery(ctx context.Context, query string, offset int64, limit int64) ([]model.ArticleShortInfoWithCategory, error) {
	ret := _m.Called(ctx, query, offset, limit)

	var r0 []model.ArticleShortInfoWithCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) ([]model.ArticleShortInfoWithCategory, error)); ok {
		return rf(ctx, query, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) []model.ArticleShortInfoWithCategory); ok {
		r0 = rf(ctx, query, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ArticleShortInfoWithCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64) error); ok {
		r1 = rf(ctx, query, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalForQuery provides a mock function with given fields: ctx, query
func (_m *MockArticleService) TotalForQuery(ctx context.Context, query string) (int, error) {
	ret := _m.Called(ctx, query)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockArticleService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockArticleService creates a new instance of MockArticleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockArticleService(t mockConstructorTestingTNewMockArticleService) *MockArticleService {
	mock := &MockArticleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
