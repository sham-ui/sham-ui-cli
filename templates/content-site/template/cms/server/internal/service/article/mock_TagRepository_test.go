// Code generated by mockery v2.20.0. DO NOT EDIT.

package article

import (
	model "cms/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTagRepository is an autogenerated mock type for the TagRepository type
type MockTagRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *MockTagRepository) Create(ctx context.Context, data model.Tag) (model.TagID, error) {
	ret := _m.Called(ctx, data)

	var r0 model.TagID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Tag) (model.TagID, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Tag) model.TagID); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(model.TagID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Tag) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySlug provides a mock function with given fields: ctx, slug
func (_m *MockTagRepository) GetBySlug(ctx context.Context, slug model.TagSlug) (model.Tag, error) {
	ret := _m.Called(ctx, slug)

	var r0 model.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.TagSlug) (model.Tag, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.TagSlug) model.Tag); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Get(0).(model.Tag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.TagSlug) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTagRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTagRepository creates a new instance of MockTagRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTagRepository(t mockConstructorTestingTNewMockTagRepository) *MockTagRepository {
	mock := &MockTagRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
