// Code generated by mockery v2.20.0. DO NOT EDIT.

package article

import (
	model "cms/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockArticleTagRepository is an autogenerated mock type for the ArticleTagRepository type
type MockArticleTagRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, articleID, tagID
func (_m *MockArticleTagRepository) Create(ctx context.Context, articleID model.ArticleID, tagID model.TagID) error {
	ret := _m.Called(ctx, articleID, tagID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ArticleID, model.TagID) error); ok {
		r0 = rf(ctx, articleID, tagID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, articleID, tagID
func (_m *MockArticleTagRepository) Delete(ctx context.Context, articleID model.ArticleID, tagID model.TagID) error {
	ret := _m.Called(ctx, articleID, tagID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ArticleID, model.TagID) error); ok {
		r0 = rf(ctx, articleID, tagID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTagForArticle provides a mock function with given fields: ctx, articleID
func (_m *MockArticleTagRepository) GetTagForArticle(ctx context.Context, articleID model.ArticleID) ([]model.Tag, error) {
	ret := _m.Called(ctx, articleID)

	var r0 []model.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ArticleID) ([]model.Tag, error)); ok {
		return rf(ctx, articleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.ArticleID) []model.Tag); ok {
		r0 = rf(ctx, articleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.ArticleID) error); ok {
		r1 = rf(ctx, articleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagIDs provides a mock function with given fields: ctx, articleID
func (_m *MockArticleTagRepository) GetTagIDs(ctx context.Context, articleID model.ArticleID) ([]model.TagID, error) {
	ret := _m.Called(ctx, articleID)

	var r0 []model.TagID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ArticleID) ([]model.TagID, error)); ok {
		return rf(ctx, articleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.ArticleID) []model.TagID); ok {
		r0 = rf(ctx, articleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TagID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.ArticleID) error); ok {
		r1 = rf(ctx, articleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockArticleTagRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockArticleTagRepository creates a new instance of MockArticleTagRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockArticleTagRepository(t mockConstructorTestingTNewMockArticleTagRepository) *MockArticleTagRepository {
	mock := &MockArticleTagRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
