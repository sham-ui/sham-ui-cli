// Code generated by mockery v2.20.0. DO NOT EDIT.

package article

import (
	model "cms/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockArticleRepository is an autogenerated mock type for the ArticleRepository type
type MockArticleRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *MockArticleRepository) Create(ctx context.Context, data model.Article) (model.ArticleID, error) {
	ret := _m.Called(ctx, data)

	var r0 model.ArticleID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Article) (model.ArticleID, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Article) model.ArticleID); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(model.ArticleID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Article) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockArticleRepository) Delete(ctx context.Context, id model.ArticleID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ArticleID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *MockArticleRepository) FindByID(ctx context.Context, id model.ArticleID) (model.Article, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ArticleID) (model.Article, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.ArticleID) model.Article); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Article)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.ArticleID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindShortInfo provides a mock function with given fields: ctx, offset, limit
func (_m *MockArticleRepository) FindShortInfo(ctx context.Context, offset int64, limit int64) ([]model.ArticleShortInfo, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 []model.ArticleShortInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]model.ArticleShortInfo, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []model.ArticleShortInfo); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ArticleShortInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Total provides a mock function with given fields: ctx
func (_m *MockArticleRepository) Total(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, data
func (_m *MockArticleRepository) Update(ctx context.Context, data model.Article) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Article) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockArticleRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockArticleRepository creates a new instance of MockArticleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockArticleRepository(t mockConstructorTestingTNewMockArticleRepository) *MockArticleRepository {
	mock := &MockArticleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
