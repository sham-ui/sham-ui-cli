// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/cms.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CMSClient is the client API for CMS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CMSClient interface {
	ArticleList(ctx context.Context, in *ArticleListRequest, opts ...grpc.CallOption) (*ArticleListResponse, error)
	ArticleListForCategory(ctx context.Context, in *ArticleListForCategoryRequest, opts ...grpc.CallOption) (*ArticleListForCategoryResponse, error)
	ArticleListForTag(ctx context.Context, in *ArticleListForTagRequest, opts ...grpc.CallOption) (*ArticleListForTagResponse, error)
	ArticleListForQuery(ctx context.Context, in *ArticleListForQueryRequest, opts ...grpc.CallOption) (*ArticleListResponse, error)
	Article(ctx context.Context, in *ArticleRequest, opts ...grpc.CallOption) (*ArticleResponse, error)
	Asset(ctx context.Context, in *AssetRequest, opts ...grpc.CallOption) (*AssetResponse, error)
}

type cMSClient struct {
	cc grpc.ClientConnInterface
}

func NewCMSClient(cc grpc.ClientConnInterface) CMSClient {
	return &cMSClient{cc}
}

func (c *cMSClient) ArticleList(ctx context.Context, in *ArticleListRequest, opts ...grpc.CallOption) (*ArticleListResponse, error) {
	out := new(ArticleListResponse)
	err := c.cc.Invoke(ctx, "/proto.CMS/ArticleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSClient) ArticleListForCategory(ctx context.Context, in *ArticleListForCategoryRequest, opts ...grpc.CallOption) (*ArticleListForCategoryResponse, error) {
	out := new(ArticleListForCategoryResponse)
	err := c.cc.Invoke(ctx, "/proto.CMS/ArticleListForCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSClient) ArticleListForTag(ctx context.Context, in *ArticleListForTagRequest, opts ...grpc.CallOption) (*ArticleListForTagResponse, error) {
	out := new(ArticleListForTagResponse)
	err := c.cc.Invoke(ctx, "/proto.CMS/ArticleListForTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSClient) ArticleListForQuery(ctx context.Context, in *ArticleListForQueryRequest, opts ...grpc.CallOption) (*ArticleListResponse, error) {
	out := new(ArticleListResponse)
	err := c.cc.Invoke(ctx, "/proto.CMS/ArticleListForQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSClient) Article(ctx context.Context, in *ArticleRequest, opts ...grpc.CallOption) (*ArticleResponse, error) {
	out := new(ArticleResponse)
	err := c.cc.Invoke(ctx, "/proto.CMS/Article", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSClient) Asset(ctx context.Context, in *AssetRequest, opts ...grpc.CallOption) (*AssetResponse, error) {
	out := new(AssetResponse)
	err := c.cc.Invoke(ctx, "/proto.CMS/Asset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CMSServer is the server API for CMS service.
// All implementations must embed UnimplementedCMSServer
// for forward compatibility
type CMSServer interface {
	ArticleList(context.Context, *ArticleListRequest) (*ArticleListResponse, error)
	ArticleListForCategory(context.Context, *ArticleListForCategoryRequest) (*ArticleListForCategoryResponse, error)
	ArticleListForTag(context.Context, *ArticleListForTagRequest) (*ArticleListForTagResponse, error)
	ArticleListForQuery(context.Context, *ArticleListForQueryRequest) (*ArticleListResponse, error)
	Article(context.Context, *ArticleRequest) (*ArticleResponse, error)
	Asset(context.Context, *AssetRequest) (*AssetResponse, error)
	mustEmbedUnimplementedCMSServer()
}

// UnimplementedCMSServer must be embedded to have forward compatible implementations.
type UnimplementedCMSServer struct {
}

func (UnimplementedCMSServer) ArticleList(context.Context, *ArticleListRequest) (*ArticleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleList not implemented")
}
func (UnimplementedCMSServer) ArticleListForCategory(context.Context, *ArticleListForCategoryRequest) (*ArticleListForCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleListForCategory not implemented")
}
func (UnimplementedCMSServer) ArticleListForTag(context.Context, *ArticleListForTagRequest) (*ArticleListForTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleListForTag not implemented")
}
func (UnimplementedCMSServer) ArticleListForQuery(context.Context, *ArticleListForQueryRequest) (*ArticleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleListForQuery not implemented")
}
func (UnimplementedCMSServer) Article(context.Context, *ArticleRequest) (*ArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Article not implemented")
}
func (UnimplementedCMSServer) Asset(context.Context, *AssetRequest) (*AssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Asset not implemented")
}
func (UnimplementedCMSServer) mustEmbedUnimplementedCMSServer() {}

// UnsafeCMSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CMSServer will
// result in compilation errors.
type UnsafeCMSServer interface {
	mustEmbedUnimplementedCMSServer()
}

func RegisterCMSServer(s grpc.ServiceRegistrar, srv CMSServer) {
	s.RegisterService(&CMS_ServiceDesc, srv)
}

func _CMS_ArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServer).ArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CMS/ArticleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServer).ArticleList(ctx, req.(*ArticleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMS_ArticleListForCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleListForCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServer).ArticleListForCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CMS/ArticleListForCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServer).ArticleListForCategory(ctx, req.(*ArticleListForCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMS_ArticleListForTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleListForTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServer).ArticleListForTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CMS/ArticleListForTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServer).ArticleListForTag(ctx, req.(*ArticleListForTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMS_ArticleListForQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleListForQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServer).ArticleListForQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CMS/ArticleListForQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServer).ArticleListForQuery(ctx, req.(*ArticleListForQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMS_Article_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServer).Article(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CMS/Article",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServer).Article(ctx, req.(*ArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMS_Asset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServer).Asset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CMS/Asset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServer).Asset(ctx, req.(*AssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CMS_ServiceDesc is the grpc.ServiceDesc for CMS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CMS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CMS",
	HandlerType: (*CMSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ArticleList",
			Handler:    _CMS_ArticleList_Handler,
		},
		{
			MethodName: "ArticleListForCategory",
			Handler:    _CMS_ArticleListForCategory_Handler,
		},
		{
			MethodName: "ArticleListForTag",
			Handler:    _CMS_ArticleListForTag_Handler,
		},
		{
			MethodName: "ArticleListForQuery",
			Handler:    _CMS_ArticleListForQuery_Handler,
		},
		{
			MethodName: "Article",
			Handler:    _CMS_Article_Handler,
		},
		{
			MethodName: "Asset",
			Handler:    _CMS_Asset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cms.proto",
}
