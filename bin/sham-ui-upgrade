#!/usr/bin/env node

const os = require( 'os' );
const fs = require( 'fs' );
const program = require( 'commander' );
const path = require( 'path' );
const ora = require( 'ora' );
const { cyan } = require( 'chalk' );
const scaffold = require( '../src/new' );
const upgrade = require( '../src/upgrade' );
const capitalize = require( '../src/utils/capitalize' );

const VALID_TEMPLATES = [
    'app',
    'component',
    'styled-component',
    'admin-panel',
    'content-site'
];

program
    .usage( `<${VALID_TEMPLATES.join( '|' )}> [project-name]` )
    .parse( process.argv );

if ( program.args.length < 1 ) {
    return program.help();
}

const type = program.args[ 0 ];
if ( -1 === VALID_TEMPLATES.indexOf( type ) ) {
    return program.help();
}

const template = path.join( __dirname, '../', 'templates', type );
const name = program.args[ 1 ];
const to = path.resolve( name );

upgradeProject( template, name, to );

function upgradeProject( template, name, to ) {
    const spinner = ora( 'Process template' );
    spinner.start();

    createTempDir()
        .then(
            tempDir => promisify( tempDir, scaffold, [ name, template, tempDir ] )
        )
        .then(
            tempDir => promisify( tempDir, upgrade, [ tempDir, to ] )
        )
        .then(
            tmpDir => promisify( null, fs.rmdir, [ tmpDir, { recursive: true } ] )
        )
        .then(
            () => spinner.succeed( `${capitalize( type )} ${cyan( name )} upgraded!` ),
            err => spinner.fail( `Unexpected error: ${err}` )
        );

    spinner.stop();
}

function createTempDir() {
    return new Promise( ( resolve, reject ) => {
        const tmpDir = os.tmpdir();
        fs.mkdtemp( `${tmpDir}${path.sep}`, ( err, folder ) => {
            if ( err ) {
                reject( err )
            } else {
                resolve( folder )
            }
        } );
    } );
}

function promisify( value, fn, args ) {
    return new Promise( ( resolve, reject ) => {
        function callback( err ) {
            if ( err ) {
                reject( err );
            } else {
                resolve( value );
            }
        }
        fn.apply( null, [].concat( args, callback ) );
    } );
}